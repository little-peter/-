import java.util.Random;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.FutureTask;

//创建并得到线程执行结果。实现Callable接口+Future
public class My implements Callable<Integer> {
    //创建了线程的任务和返回方法
    @Override
    public Integer call() throws Exception {
int num=new Random().nextInt(10);
        System.out.println("子线程："+Thread.currentThread().getName()+"随机数"+num);
        return num;
    }

    public static void main(String[] args) throws ExecutionException, InterruptedException {
        //1.创建一个Callable
       My myCallable=new My();
        //2。创建一个FutureTask对象来接收返回值
        FutureTask<Integer> futureTask=new FutureTask<>(myCallable);
        //3.创建线程
        Thread thread=new Thread(futureTask);
        thread.start();
        int result=futureTask.get();
        System.out.println(String.format("线程名：%s,数字：%d",Thread.currentThread().getName(),result));

    }
}
//优点：有返回值